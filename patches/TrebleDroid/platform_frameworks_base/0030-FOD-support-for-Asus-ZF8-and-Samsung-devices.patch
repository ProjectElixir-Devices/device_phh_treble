From ad296495375e02f35e7c97f82d838c23d15e296d Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Sun, 18 Dec 2022 18:20:40 -0500
Subject: [PATCH 30/37] FOD support for Asus ZF8 and Samsung devices

Thanks Asus for providing a free device to make this support
And thanks @davigamer987 for donating enough to get a Samsung FOD device
to make this
---
 .../FrameworkParsingPackageUtils.java.orig    | 447 ------------------
 packages/SystemUI/Android.bp                  |   1 +
 packages/SystemUI/Android.bp.rej              |  10 +
 packages/SystemUI/res/values/config.xml       |   2 +-
 .../biometrics/UdfpsControllerOverlay.kt      |   6 +-
 .../android/systemui/biometrics/UdfpsView.kt  | 137 ++++++
 services/core/Android.bp                      |   7 +-
 .../server/biometrics/AuthService.java        | 238 +++++++++-
 8 files changed, 396 insertions(+), 452 deletions(-)
 delete mode 100644 core/java/android/content/pm/parsing/FrameworkParsingPackageUtils.java.orig
 create mode 100644 packages/SystemUI/Android.bp.rej

diff --git a/core/java/android/content/pm/parsing/FrameworkParsingPackageUtils.java.orig b/core/java/android/content/pm/parsing/FrameworkParsingPackageUtils.java.orig
deleted file mode 100644
index b75ba82a..00000000
--- a/core/java/android/content/pm/parsing/FrameworkParsingPackageUtils.java.orig
+++ /dev/null
@@ -1,447 +0,0 @@
-/*
- * Copyright (C) 2022 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.content.pm.parsing;
-
-import static android.content.pm.PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;
-
-import android.annotation.CheckResult;
-import android.annotation.IntRange;
-import android.annotation.NonNull;
-import android.annotation.Nullable;
-import android.content.pm.PackageManager;
-import android.content.pm.Signature;
-import android.content.pm.SigningDetails;
-import android.content.pm.parsing.result.ParseInput;
-import android.content.pm.parsing.result.ParseResult;
-import android.os.Build;
-import android.os.FileUtils;
-import android.os.SystemProperties;
-import android.text.TextUtils;
-import android.util.Base64;
-import android.util.Slog;
-import android.util.apk.ApkSignatureVerifier;
-
-import com.android.internal.util.ArrayUtils;
-import com.android.modules.utils.build.UnboundedSdkLevel;
-
-import java.security.KeyFactory;
-import java.security.NoSuchAlgorithmException;
-import java.security.PublicKey;
-import java.security.spec.EncodedKeySpec;
-import java.security.spec.InvalidKeySpecException;
-import java.security.spec.X509EncodedKeySpec;
-import java.util.Arrays;
-
-/** @hide */
-public class FrameworkParsingPackageUtils {
-
-    private static final String TAG = "FrameworkParsingPackageUtils";
-
-    /**
-     * For those names would be used as a part of the file name. Limits size to 223 and reserves 32
-     * for the OS.
-     */
-    private static final int MAX_FILE_NAME_SIZE = 223;
-
-    public static final int PARSE_IGNORE_OVERLAY_REQUIRED_SYSTEM_PROPERTY = 1 << 7;
-    public static final int PARSE_APK_IN_APEX = 1 << 9;
-
-    /**
-     * Check if the given name is valid.
-     *
-     * @param name The name to check.
-     * @param requireSeparator {@code true} if the name requires containing a separator at least.
-     * @param requireFilename {@code true} to apply file name validation to the given name. It also
-     *                        limits length of the name to the {@link #MAX_FILE_NAME_SIZE}.
-     * @return Success if it's valid.
-     */
-    public static String validateName(String name, boolean requireSeparator,
-            boolean requireFilename) {
-        final int N = name.length();
-        boolean hasSep = false;
-        boolean front = true;
-        for (int i = 0; i < N; i++) {
-            final char c = name.charAt(i);
-            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
-                front = false;
-                continue;
-            }
-            if (!front) {
-                if ((c >= '0' && c <= '9') || c == '_') {
-                    continue;
-                }
-            }
-            if (c == '.') {
-                hasSep = true;
-                front = true;
-                continue;
-            }
-            return "bad character '" + c + "'";
-        }
-        if (requireFilename) {
-            if (!FileUtils.isValidExtFilename(name)) {
-                return "Invalid filename";
-            } else if (N > MAX_FILE_NAME_SIZE) {
-                return "the length of the name is greater than " + MAX_FILE_NAME_SIZE;
-            }
-        }
-        return hasSep || !requireSeparator ? null : "must have at least one '.' separator";
-    }
-
-    /**
-     * @see #validateName(String, boolean, boolean)
-     */
-    public static ParseResult validateName(ParseInput input, String name, boolean requireSeparator,
-            boolean requireFilename) {
-        final String errorMessage = validateName(name, requireSeparator, requireFilename);
-        if (errorMessage != null) {
-            return input.error(errorMessage);
-        }
-        return input.success(null);
-    }
-
-    /**
-     * @return {@link PublicKey} of a given encoded public key.
-     */
-    public static PublicKey parsePublicKey(final String encodedPublicKey) {
-        if (encodedPublicKey == null) {
-            Slog.w(TAG, "Could not parse null public key");
-            return null;
-        }
-
-        try {
-            return parsePublicKey(Base64.decode(encodedPublicKey, Base64.DEFAULT));
-        } catch (IllegalArgumentException e) {
-            Slog.w(TAG, "Could not parse verifier public key; invalid Base64");
-            return null;
-        }
-    }
-
-    /**
-     * @return {@link PublicKey} of the given byte array of a public key.
-     */
-    public static PublicKey parsePublicKey(final byte[] publicKey) {
-        if (publicKey == null) {
-            Slog.w(TAG, "Could not parse null public key");
-            return null;
-        }
-
-        final EncodedKeySpec keySpec;
-        try {
-            keySpec = new X509EncodedKeySpec(publicKey);
-        } catch (IllegalArgumentException e) {
-            Slog.w(TAG, "Could not parse verifier public key; invalid Base64");
-            return null;
-        }
-
-        /* First try the key as an RSA key. */
-        try {
-            final KeyFactory keyFactory = KeyFactory.getInstance("RSA");
-            return keyFactory.generatePublic(keySpec);
-        } catch (NoSuchAlgorithmException e) {
-            Slog.wtf(TAG, "Could not parse public key: RSA KeyFactory not included in build");
-        } catch (InvalidKeySpecException e) {
-            // Not a RSA public key.
-        }
-
-        /* Now try it as a ECDSA key. */
-        try {
-            final KeyFactory keyFactory = KeyFactory.getInstance("EC");
-            return keyFactory.generatePublic(keySpec);
-        } catch (NoSuchAlgorithmException e) {
-            Slog.wtf(TAG, "Could not parse public key: EC KeyFactory not included in build");
-        } catch (InvalidKeySpecException e) {
-            // Not a ECDSA public key.
-        }
-
-        /* Now try it as a DSA key. */
-        try {
-            final KeyFactory keyFactory = KeyFactory.getInstance("DSA");
-            return keyFactory.generatePublic(keySpec);
-        } catch (NoSuchAlgorithmException e) {
-            Slog.wtf(TAG, "Could not parse public key: DSA KeyFactory not included in build");
-        } catch (InvalidKeySpecException e) {
-            // Not a DSA public key.
-        }
-
-        /* Not a supported key type */
-        return null;
-    }
-
-    /**
-     * Returns {@code true} if both the property name and value are empty or if the given system
-     * property is set to the specified value. Properties can be one or more, and if properties are
-     * more than one, they must be separated by comma, and count of names and values must be equal,
-     * and also every given system property must be set to the corresponding value or it's a
-     * wildcard. In all other cases, returns {@code false}
-     */
-    public static boolean checkRequiredSystemProperties(@Nullable String rawPropNames,
-            @Nullable String rawPropValues) {
-        if (TextUtils.isEmpty(rawPropNames) || TextUtils.isEmpty(rawPropValues)) {
-            if (!TextUtils.isEmpty(rawPropNames) || !TextUtils.isEmpty(rawPropValues)) {
-                // malformed condition - incomplete
-                Slog.w(TAG, "Disabling overlay - incomplete property :'" + rawPropNames
-                        + "=" + rawPropValues + "' - require both requiredSystemPropertyName"
-                        + " AND requiredSystemPropertyValue to be specified.");
-                return false;
-            }
-            // no valid condition set - so no exclusion criteria, overlay will be included.
-            return true;
-        }
-
-        final String[] propNames = rawPropNames.split(",");
-        final String[] propValues = rawPropValues.split(",");
-
-        if (propNames.length != propValues.length) {
-            Slog.w(TAG, "Disabling overlay - property :'" + rawPropNames
-                    + "=" + rawPropValues + "' - require both requiredSystemPropertyName"
-                    + " AND requiredSystemPropertyValue lists to have the same size.");
-            return false;
-        }
-        for (int i = 0; i < propNames.length; i++) {
-            final String currValue = SystemProperties.get(propNames[i]);
-            // 1. Make sure prop is set.
-            if (currValue == null) {
-                return false;
-            }
-            // 2. Check next prop if expected value is a wildcard.
-            if ("*".equals(propValues[i])) {
-                continue;
-            }
-            // 3. Check if prop is equal to expected value.
-            if (!currValue.equals(propValues[i])) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    @CheckResult
-    public static ParseResult<SigningDetails> getSigningDetails(ParseInput input,
-            String baseCodePath, boolean skipVerify, boolean isStaticSharedLibrary,
-            @NonNull SigningDetails existingSigningDetails, int targetSdk) {
-        int minSignatureScheme = ApkSignatureVerifier.getMinimumSignatureSchemeVersionForTargetSdk(
-                targetSdk);
-        if (isStaticSharedLibrary) {
-            // must use v2 signing scheme
-            minSignatureScheme = SigningDetails.SignatureSchemeVersion.SIGNING_BLOCK_V2;
-        }
-        final ParseResult<SigningDetails> verified;
-        if (skipVerify) {
-            // systemDir APKs are already trusted, save time by not verifying; since the
-            // signature is not verified and some system apps can have their V2+ signatures
-            // stripped allow pulling the certs from the jar signature.
-            verified = ApkSignatureVerifier.unsafeGetCertsWithoutVerification(input, baseCodePath,
-                    SigningDetails.SignatureSchemeVersion.JAR);
-        } else {
-            verified = ApkSignatureVerifier.verify(input, baseCodePath, minSignatureScheme);
-        }
-
-        if (verified.isError()) {
-            return input.error(verified);
-        }
-
-        // Verify that entries are signed consistently with the first pkg
-        // we encountered. Note that for splits, certificates may have
-        // already been populated during an earlier parse of a base APK.
-        if (existingSigningDetails == SigningDetails.UNKNOWN) {
-            return verified;
-        } else {
-            if (!Signature.areExactMatch(existingSigningDetails.getSignatures(),
-                    verified.getResult().getSignatures())) {
-                return input.error(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,
-                        baseCodePath + " has mismatched certificates");
-            }
-
-            return input.success(existingSigningDetails);
-        }
-    }
-
-    /**
-     * Computes the minSdkVersion to use at runtime. If the package is not compatible with this
-     * platform, populates {@code outError[0]} with an error message.
-     * <p>
-     * If {@code minCode} is not specified, e.g. the value is {@code null}, then behavior varies
-     * based on the {@code platformSdkVersion}:
-     * <ul>
-     * <li>If the platform SDK version is greater than or equal to the
-     * {@code minVers}, returns the {@code mniVers} unmodified.
-     * <li>Otherwise, returns -1 to indicate that the package is not
-     * compatible with this platform.
-     * </ul>
-     * <p>
-     * Otherwise, the behavior varies based on whether the current platform
-     * is a pre-release version, e.g. the {@code platformSdkCodenames} array
-     * has length > 0:
-     * <ul>
-     * <li>If this is a pre-release platform and the value specified by
-     * {@code targetCode} is contained within the array of allowed pre-release
-     * codenames, this method will return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.
-     * <li>If this is a released platform, this method will return -1 to
-     * indicate that the package is not compatible with this platform.
-     * </ul>
-     *
-     * @param minVers              minSdkVersion number, if specified in the application manifest,
-     *                             or 1 otherwise
-     * @param minCode              minSdkVersion code, if specified in the application manifest, or
-     *                             {@code null} otherwise
-     * @param platformSdkVersion   platform SDK version number, typically Build.VERSION.SDK_INT
-     * @param platformSdkCodenames array of allowed prerelease SDK codenames for this platform
-     * @return the minSdkVersion to use at runtime if successful
-     */
-    public static ParseResult<Integer> computeMinSdkVersion(@IntRange(from = 1) int minVers,
-            @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion,
-            @NonNull String[] platformSdkCodenames, @NonNull ParseInput input) {
-        // If it's a release SDK, make sure we meet the minimum SDK requirement.
-        if (minCode == null) {
-            if (minVers <= platformSdkVersion) {
-                return input.success(minVers);
-            }
-
-            // We don't meet the minimum SDK requirement.
-            return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK,
-                    "Requires newer sdk version #" + minVers
-                            + " (current version is #" + platformSdkVersion + ")");
-        }
-
-        // If it's a pre-release SDK and the codename matches this platform, we
-        // definitely meet the minimum SDK requirement.
-        if (matchTargetCode(platformSdkCodenames, minCode)) {
-            return input.success(Build.VERSION_CODES.CUR_DEVELOPMENT);
-        }
-
-        // Otherwise, we're looking at an incompatible pre-release SDK.
-        if (platformSdkCodenames.length > 0) {
-            return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK,
-                    "Requires development platform " + minCode
-                            + " (current platform is any of "
-                            + Arrays.toString(platformSdkCodenames) + ")");
-        } else {
-            return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK,
-                    "Requires development platform " + minCode
-                            + " but this is a release platform.");
-        }
-    }
-
-    /**
-     * Computes the targetSdkVersion to use at runtime. If the package is not compatible with this
-     * platform, populates {@code outError[0]} with an error message.
-     * <p>
-     * If {@code targetCode} is not specified, e.g. the value is {@code null}, then the {@code
-     * targetVers} will be returned unmodified.
-     * <p>
-     * When {@code allowUnknownCodenames} is false, the behavior varies based on whether the
-     * current platform is a pre-release version, e.g. the {@code platformSdkCodenames} array has
-     * length > 0:
-     * <ul>
-     * <li>If this is a pre-release platform and the value specified by
-     * {@code targetCode} is contained within the array of allowed pre-release
-     * codenames, this method will return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.
-     * <li>If this is a released platform, this method will return -1 to
-     * indicate that the package is not compatible with this platform.
-     * </ul>
-     * <p>
-     * When {@code allowUnknownCodenames} is true, any codename that is not known (presumed to be
-     * a codename announced after the build of the current device) is allowed and this method will
-     * return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.
-     *
-     * @param targetVers            targetSdkVersion number, if specified in the application
-     *                              manifest, or 0 otherwise
-     * @param targetCode            targetSdkVersion code, if specified in the application manifest,
-     *                              or {@code null} otherwise
-     * @param platformSdkCodenames  array of allowed pre-release SDK codenames for this platform
-     * @param allowUnknownCodenames allow unknown codenames, if true this method will accept unknown
-     *                              (presumed to be future) codenames
-     * @return the targetSdkVersion to use at runtime if successful
-     */
-    public static ParseResult<Integer> computeTargetSdkVersion(@IntRange(from = 0) int targetVers,
-            @Nullable String targetCode, @NonNull String[] platformSdkCodenames,
-            @NonNull ParseInput input, boolean allowUnknownCodenames) {
-        // If it's a release SDK, return the version number unmodified.
-        if (targetCode == null) {
-            return input.success(targetVers);
-        }
-
-        try {
-            if (allowUnknownCodenames && UnboundedSdkLevel.isAtMost(targetCode)) {
-                return input.success(Build.VERSION_CODES.CUR_DEVELOPMENT);
-            }
-        } catch (IllegalArgumentException e) {
-            // isAtMost() throws it when encountering an older SDK codename
-            return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK, e.getMessage());
-        }
-
-        // If it's a pre-release SDK and the codename matches this platform, it
-        // definitely targets this SDK.
-        if (matchTargetCode(platformSdkCodenames, targetCode)) {
-            return input.success(Build.VERSION_CODES.CUR_DEVELOPMENT);
-        }
-
-        // Otherwise, we're looking at an incompatible pre-release SDK.
-        if (platformSdkCodenames.length > 0) {
-            return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK,
-                    "Requires development platform " + targetCode
-                            + " (current platform is any of "
-                            + Arrays.toString(platformSdkCodenames) + ")");
-        } else {
-            return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK,
-                    "Requires development platform " + targetCode
-                            + " but this is a release platform.");
-        }
-    }
-
-    /**
-     * Computes the maxSdkVersion. If the package is not compatible with this platform, populates
-     * {@code outError[0]} with an error message.
-     * <p>
-     * {@code maxVers} is compared against {@code platformSdkVersion}. If {@code maxVers} is less
-     * than the {@code platformSdkVersion} then populates {@code outError[0]} with an error message.
-     * Otherwise, it returns {@code maxVers} unmodified.
-     *
-     * @param maxVers maxSdkVersion number, if specified in the application manifest, or {@code
-     *                Integer.MAX_VALUE} otherwise
-     * @param platformSdkVersion   platform SDK version number, typically Build.VERSION.SDK_INT
-     * @return the maxSdkVersion that was recognised or an error if the condition is not satisfied
-     */
-    public static ParseResult<Integer> computeMaxSdkVersion(@IntRange(from = 0) int maxVers,
-            @IntRange(from = 1) int platformSdkVersion, @NonNull ParseInput input) {
-        if (platformSdkVersion > maxVers) {
-            return input.error(PackageManager.INSTALL_FAILED_NEWER_SDK,
-                    "Requires max SDK version " + maxVers + " but is "
-                            + platformSdkVersion);
-        } else {
-            return input.success(maxVers);
-        }
-    }
-
-    /**
-     * Matches a given {@code targetCode} against a set of release codeNames. Target codes can
-     * either be of the form {@code [codename]}" (e.g {@code "Q"}) or of the form {@code
-     * [codename].[fingerprint]} (e.g {@code "Q.cafebc561"}).
-     */
-    private static boolean matchTargetCode(@NonNull String[] codeNames,
-            @NonNull String targetCode) {
-        final String targetCodeName;
-        final int targetCodeIdx = targetCode.indexOf('.');
-        if (targetCodeIdx == -1) {
-            targetCodeName = targetCode;
-        } else {
-            targetCodeName = targetCode.substring(0, targetCodeIdx);
-        }
-        return ArrayUtils.contains(codeNames, targetCodeName);
-    }
-}
diff --git a/packages/SystemUI/Android.bp b/packages/SystemUI/Android.bp
index 2987dd01..34871025 100644
--- a/packages/SystemUI/Android.bp
+++ b/packages/SystemUI/Android.bp
@@ -177,6 +177,7 @@ android_library {
         "lottie",
         "LowLightDreamLib",
         "motion_tool_lib",
+        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
         "faceunlock_framework",
         "vendor.lineage.powershare-V1.0-java",
         "bcsmartspace-google",
diff --git a/packages/SystemUI/Android.bp.rej b/packages/SystemUI/Android.bp.rej
new file mode 100644
index 00000000..a464bdaf
--- /dev/null
+++ b/packages/SystemUI/Android.bp.rej
@@ -0,0 +1,10 @@
+--- packages/SystemUI/Android.bp
++++ packages/SystemUI/Android.bp
+@@ -177,6 +177,7 @@ android_library {
+         "lottie",
+         "LowLightDreamLib",
+         "motion_tool_lib",
++        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
+         "bcsmartspace-google",
+         "faceunlock_framework",
+         "vendor.lineage.powershare-V1.0-java",
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index ea19cd59..b8e05cc9 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -586,7 +586,7 @@
 
     <!-- The radius of the enrollment progress bar, in dp -->
     <integer name="config_udfpsEnrollProgressBar" translatable="false">
-        70
+        50
     </integer>
 
     <!-- The time (in ms) needed to trigger the lock icon view's long-press affordance -->
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
index 6a03531d..6644f2e5 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
@@ -122,7 +122,8 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
         gravity = android.view.Gravity.TOP or android.view.Gravity.LEFT
         layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS
         flags = (Utils.FINGERPRINT_OVERLAY_LAYOUT_PARAM_FLAGS or
-                WindowManager.LayoutParams.FLAG_SPLIT_TOUCH)
+                WindowManager.LayoutParams.FLAG_SPLIT_TOUCH) or
+		WindowManager.LayoutParams.FLAG_DIM_BEHIND
         if (frameworkDimming) {
             flags = flags or WindowManager.LayoutParams.FLAG_DIM_BEHIND
         }
@@ -201,6 +202,9 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
                     windowManager.addView(this, coreLayoutParams.updateDimensions(animation))
                     sensorRect = sensorBounds
                     touchExplorationEnabled = accessibilityManager.isTouchExplorationEnabled
+                    dimUpdate = {
+                        windowManager.updateViewLayout(this, coreLayoutParams.updateDimensions(animation).apply { dimAmount = it })
+                    }
                     overlayTouchListener = TouchExplorationStateChangeListener {
                         if (accessibilityManager.isTouchExplorationEnabled) {
                             setOnHoverListener { v, event -> onTouch(v, event, true) }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
index 1e2e6c8b..e85e6f7b 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
@@ -19,16 +19,24 @@ import android.content.Context
 import android.graphics.Canvas
 import android.graphics.Color
 import android.graphics.Paint
+import android.graphics.PixelFormat
 import android.graphics.PointF
 import android.graphics.Rect
 import android.graphics.RectF
+import android.os.FileObserver
 import android.util.AttributeSet
 import android.util.Log
 import android.view.MotionEvent
+import android.view.SurfaceHolder
+import android.view.SurfaceView
+import android.view.ViewGroup
 import android.view.Surface
 import android.widget.FrameLayout
 import com.android.systemui.R
 import com.android.systemui.doze.DozeReceiver
+import java.io.File
+
+import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon
 
 private const val TAG = "UdfpsView"
 
@@ -39,6 +47,54 @@ class UdfpsView(
     context: Context,
     attrs: AttributeSet?
 ) : FrameLayout(context, attrs), DozeReceiver {
+    private var currentOnIlluminatedRunnable: Runnable? = null
+    private val mySurfaceView = SurfaceView(context)
+    init {
+        mySurfaceView.setVisibility(INVISIBLE)
+        mySurfaceView.setZOrderOnTop(true)
+        addView(mySurfaceView, FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))
+        mySurfaceView.holder.addCallback(object: SurfaceHolder.Callback{
+            override fun surfaceCreated(p0: SurfaceHolder) {
+                Log.d("PHH", "Surface created!")
+                val paint = Paint(0 /* flags */);
+                paint.setAntiAlias(true);
+                paint.setStyle(Paint.Style.FILL);
+                val colorStr = android.os.SystemProperties.get("persist.sys.phh.fod_color", "00ff00");
+                try {
+                    val parsedColor = Color.parseColor("#" + colorStr);
+                    val r = (parsedColor shr 16) and 0xff;
+                    val g = (parsedColor shr  8) and 0xff;
+                    val b = (parsedColor shr  0) and 0xff;
+                    paint.setARGB(255, r, g, b);
+                } catch(t: Throwable) {
+                    Log.d("PHH", "Failed parsing color #" + colorStr, t);
+                }
+                var canvas: Canvas? = null
+                try {
+                    canvas = p0.lockCanvas();
+Log.d("PHH", "Surface dimensions ${canvas.getWidth()*1.0f} ${canvas.getHeight()*1.0f}")
+                    canvas.drawOval(RectF(0.0f, 0.0f, canvas.getWidth()*1.0f, canvas.getHeight()*1.0f), paint);
+                } finally {
+                    // Make sure the surface is never left in a bad state.
+                    if (canvas != null) {
+                        p0.unlockCanvasAndPost(canvas);
+                    }
+                }
+
+                currentOnIlluminatedRunnable?.run()
+            }
+
+            override fun surfaceChanged(p0: SurfaceHolder, p1: Int, p2: Int, p3: Int) {
+Log.d("PHH", "Got surface size $p1 $p2 $p3")
+            }
+
+            override fun surfaceDestroyed(p0: SurfaceHolder) {
+Log.d("PHH", "Surface destroyed!")
+            }
+        })
+        mySurfaceView.holder.setFormat(PixelFormat.RGBA_8888)
+
+    }
 
     // Use expanded overlay when feature flag is true, set by UdfpsViewController
     var useExpandedOverlay: Boolean = false
@@ -69,6 +125,8 @@ class UdfpsView(
     /** Parameters that affect the position and size of the overlay. */
     var overlayParams = UdfpsOverlayParams()
 
+    var dimUpdate: (Float) -> Unit = {}
+
     /** Debug message. */
     var debugMessage: String? = null
         set(value) {
@@ -153,6 +211,21 @@ class UdfpsView(
             !(animationViewController?.shouldPauseAuth() ?: false)
     }
 
+    fun goodixCmd(id: Int) {
+        val goodixSvc = IGoodixFingerprintDaemon.getService()
+        if(goodixSvc != null) {
+            goodixSvc.sendCommand(id, ArrayList(), { returnCode, resultData -> {
+                Log.e("PHH-Enroll", "Goodix send command returned code "+ returnCode);
+            }});
+        }
+    }
+
+    val asusGhbmOnAchieved = "/sys/class/drm/ghbm_on_achieved"
+    var hasAsusGhbm = File(asusGhbmOnAchieved).exists()
+    var samsungActualMaskBrightness = "/sys/class/lcd/panel/actual_mask_brightness"
+    val hasSamsungMask = File(samsungActualMaskBrightness).exists()
+    var fodFileObserver: FileObserver? = null
+
     fun configureDisplay(onDisplayConfigured: Runnable) {
         isDisplayConfigured = true
         animationViewController?.onDisplayConfiguring()
@@ -164,6 +237,26 @@ class UdfpsView(
         } else {
             doIlluminate(null /* surface */, onDisplayConfigured)
         }
+
+        mySurfaceView.setVisibility(VISIBLE)
+        Log.d("PHH", "setting surface visible!")
+
+        val brightness = File("/sys/class/backlight/panel0-backlight/brightness").readText().toDouble()
+        val maxBrightness = File("/sys/class/backlight/panel0-backlight/max_brightness").readText().toDouble()
+
+        // Assume HBM is max brightness
+        val dim = 1.0 - Math.pow( (brightness / maxBrightness), 1/2.3);
+        Log.d("PHH-Enroll", "Brightness is $brightness / $maxBrightness, setting dim to $dim")
+        if (hasAsusGhbm) {
+            dimUpdate(dim.toFloat())
+        }
+        if (hasSamsungMask) {
+            dimUpdate(dim.toFloat())
+        }
+
+        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS")) {
+            goodixCmd(200001)
+        }
     }
 
     private fun doIlluminate(surface: Surface?, onDisplayConfigured: Runnable?) {
@@ -185,5 +278,49 @@ class UdfpsView(
             view.visibility = INVISIBLE
         }
         mUdfpsDisplayMode?.disable(null /* onDisabled */)
+
+        if (hasAsusGhbm) {
+            fodFileObserver = object: FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
+                override fun onEvent(event: Int, path: String): Unit {
+                    Log.d("PHH-Enroll", "Asus ghbm event")
+                    try {
+                        val spotOn = File(asusGhbmOnAchieved).readText().toInt()
+                        if(spotOn == 0) {
+                            dimUpdate(0.0f)
+                            fodFileObserver?.stopWatching()
+                            fodFileObserver = null
+                        }
+                    } catch(e: Exception) {
+                        Log.d("PHH-Enroll", "Failed dimpdate off", e)
+                    }
+                }
+            };
+            fodFileObserver?.startWatching();
+        } else if (hasSamsungMask) {
+            fodFileObserver = object: FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
+                override fun onEvent(event: Int, path: String): Unit {
+                    Log.d("PHH-Enroll", "samsung mask brightness event")
+                    try {
+                        val spotOn = File(samsungActualMaskBrightness).readText().toInt()
+                        if(spotOn == 0) {
+                            dimUpdate(0.0f)
+                            fodFileObserver?.stopWatching()
+                            fodFileObserver = null
+                        }
+                    } catch(e: Exception) {
+                        Log.d("PHH-Enroll", "Failed dimpdate off", e)
+                    }
+                }
+            };
+            fodFileObserver?.startWatching();
+        } else {
+            dimUpdate(0.0f)
+        }
+
+        mySurfaceView.setVisibility(INVISIBLE)
+        Log.d("PHH", "setting surface invisible!")
+        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS")) {
+            goodixCmd(200003)
+        }
     }
 }
diff --git a/services/core/Android.bp b/services/core/Android.bp
index da704ee3..ab211cbb 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -177,7 +177,12 @@ java_library_static {
         "overlayable_policy_aidl-java",
         "SurfaceFlingerProperties",
         "com.android.sysprop.watchdog",
-        "vendor.samsung.hardware.sysinput-V1.2-java", // HIDL
+        // HIDL
+        "vendor.samsung.hardware.sysinput-V1.2-java",
+        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.samsung.hardware.biometrics.fingerprint-V3.0-java",
+        "vendor.oplus.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.oppo.hardware.biometrics.fingerprint-V2.1-java",
         "faceunlock_framework",
         "kotlin-stdlib",
         "kotlinx_coroutines_android",
diff --git a/services/core/java/com/android/server/biometrics/AuthService.java b/services/core/java/com/android/server/biometrics/AuthService.java
index a94c4c07..b7d010a3 100644
--- a/services/core/java/com/android/server/biometrics/AuthService.java
+++ b/services/core/java/com/android/server/biometrics/AuthService.java
@@ -77,6 +77,22 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import android.hardware.display.DisplayManager;
+
+import android.graphics.Point;
+import android.util.DisplayMetrics;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.PrintWriter;
+
+import android.os.FileObserver;
+import android.os.Build;
+
+import vendor.samsung.hardware.biometrics.fingerprint.V3_0.ISehBiometricsFingerprint;
+import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon;
+import vendor.samsung.hardware.sysinput.V1_0.ISehSysInputDev;
+
 /**
  * System service that provides an interface for authenticating with biometrics and
  * PIN/pattern/password to BiometricPrompt and lock screen.
@@ -95,6 +111,9 @@ public class AuthService extends SystemService {
     @VisibleForTesting
     final IAuthService.Stub mImpl;
 
+    private FileObserver fodFileObserver = null;
+    private ISehBiometricsFingerprint mSamsungFingerprint = null;
+
     /**
      * Class for injecting dependencies into AuthService.
      * TODO(b/141025588): Replace with a dependency injection framework (e.g. Guice, Dagger).
@@ -652,6 +671,72 @@ public class AuthService extends SystemService {
         registerAuthenticators(hidlConfigs);
 
         mInjector.publishBinderService(this, mImpl);
+        try {
+            mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+            android.util.Log.e("PHH", "Got samsung fingerprint HAL");
+        } catch(Exception e) {
+            android.util.Log.e("PHH", "Failed getting Samsung fingerprint HAL", e);
+        }
+        if(samsungHasCmd("fod_enable") && mSamsungFingerprint != null) {
+            samsungCmd("fod_enable,1,1,0");
+            String actualMaskBrightnessPath = "/sys/class/lcd/panel/actual_mask_brightness";
+            android.util.Log.e("PHH-Enroll", "Reading actual brightness file gives " + readFile(actualMaskBrightnessPath));
+            fodFileObserver = new FileObserver(actualMaskBrightnessPath, FileObserver.MODIFY) {
+                @Override
+                public void onEvent(int event, String path) {
+                    String actualMask = readFile(actualMaskBrightnessPath);
+                    try {
+                        mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+                    } catch(Exception e) {}
+                    Slog.d("PHH-Enroll", "New actual mask brightness is " + actualMask);
+                    try {
+                        int eventReq = 0;
+                        if("0".equals(actualMask)) {
+                            eventReq = 1; //released
+                        } else {
+                            eventReq = 2; //pressed
+                        }
+                        if(mSamsungFingerprint != null) {
+                            mSamsungFingerprint.sehRequest(22 /* SEM_FINGER_STATE */, eventReq, new java.util.ArrayList<Byte>(),
+                                    (int retval, java.util.ArrayList<Byte> out) -> {} );
+                        }
+                    } catch(Exception e) {
+                        Slog.d("PHH-Enroll", "Failed setting samsung event for mask observer", e);
+                    }
+                }
+            };
+            fodFileObserver.startWatching();
+        }
+
+        String asusGhbmOnAchieved = "/sys/class/drm/ghbm_on_achieved";
+        if( (new File(asusGhbmOnAchieved)).exists()) {
+            fodFileObserver = new FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
+                boolean wasOn = false;
+                @Override
+                public void onEvent(int event, String path) {
+                    String spotOn = readFile(asusGhbmOnAchieved);
+                    if("1".equals(spotOn)) {
+                        if(!wasOn) {
+                            try {
+                                IGoodixFingerprintDaemon goodixDaemon = IGoodixFingerprintDaemon.getService();
+
+                                //Send UI ready
+                                goodixDaemon.sendCommand(200002, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                                    Slog.e(TAG, "Goodix send command touch pressed returned code "+ returnCode);
+                                });
+                            } catch(Throwable t) {
+                                Slog.d("PHH-Enroll", "Failed sending goodix command", t);
+                            }
+                        }
+                        wasOn = true;
+                    } else {
+                        wasOn = false;
+                    }
+                }
+            };
+            fodFileObserver.startWatching();
+        }
+
     }
 
     /**
@@ -775,18 +860,104 @@ public class AuthService extends SystemService {
                 ? modality : (modality & ~BiometricAuthenticator.TYPE_CREDENTIAL);
     }
 
+    private int[] dynamicUdfpsProps() {
+        DisplayManager mDM = (DisplayManager) getContext().getSystemService(Context.DISPLAY_SERVICE);
+        Point displayRealSize = new Point();
+        DisplayMetrics displayMetrics = new DisplayMetrics();
+        mDM.getDisplay(0).getRealSize(displayRealSize);
+        mDM.getDisplay(0).getMetrics(displayMetrics);
+
+        if(readFile("/sys/class/fingerprint/fingerprint/position") != null) {
+            try {
+            ISehSysInputDev s = ISehSysInputDev.getService();
+            s.getTspFodInformation(0, (a, b) -> {
+                Slog.d("PHH-Enroll", "TspFod info " + a + ", " + b);
+            });
+            s.getTspFodPosition(0, (a, b) -> {
+                Slog.d("PHH-Enroll", "TspFod info " + a + ", " + b);
+            });
+            }catch(Throwable t) {
+                Slog.d("PHH-Enroll", "heya ", t);
+            }
+
+
+            android.util.Log.d("PHH", "Samsung fingerprint");
+            String[] fodPositionArray = readFile("/sys/class/fingerprint/fingerprint/position").split(",");
+            float bottomMM = Float.parseFloat(fodPositionArray[0]);
+            float areaSizeMM = Float.parseFloat(fodPositionArray[5]);
+            float heightMM = Float.parseFloat(fodPositionArray[2]);
+            float bottomInch = bottomMM * 0.0393700787f;
+            float areaSizeInch = areaSizeMM * 0.0393700787f;
+            float heightInch = heightMM * 0.0393700787f;
+            int bottomPx = (int)(bottomInch * displayMetrics.ydpi);
+            int areaSizePx = (int)(areaSizeInch * displayMetrics.ydpi);
+            int midDistPx = (int)(areaSizeInch * displayMetrics.ydpi / 2.0f);
+
+            float mW = areaSizePx/2;
+            float mH = areaSizePx/2;
+            float mX = displayRealSize.x/2;
+            //float mY = displayRealSize.y - bottomPx - midDistPx;
+            float mY = displayRealSize.y - (bottomInch * displayMetrics.ydpi) - (areaSizeInch * displayMetrics.ydpi / 2.0f);
+
+            samsungCmd(String.format("fod_rect,%d,%d,%d,%d", (int)(mX - mW/2), (int)(mY - mW/2), (int)(mX + mW/2), (int)(mY + mW/2)));
+            Slog.d("PHH-Enroll", "Display real size is " + displayRealSize.y + ", dpy " + displayMetrics.ydpi);
+
+            int udfpsProps[] = new int[3];
+            udfpsProps[0] = (int)mX;
+            udfpsProps[1] = (int)mY;
+            udfpsProps[2] = (int)mW;
+
+            try {
+                mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+                Slog.d("PHH-Enroll", "Samsung ask for sensor status");
+                mSamsungFingerprint.sehRequest(6, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
+                    Slog.d("PHH-Enroll", "Result is " + retval);
+                    for(int i=0; i<out.size(); i++) {
+                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
+                    }
+                } );
+                Slog.d("PHH-Enroll", "Samsung ask for sensor brightness value");
+                mSamsungFingerprint.sehRequest(32, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
+                    Slog.d("PHH-Enroll", "Result is " + retval);
+                    for(int i=0; i<out.size(); i++) {
+                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
+                    }
+                } );
+
+            } catch(Exception e) {
+                Slog.d("PHH-Enroll", "Failed setting samsung3.0 fingerprint recognition", e);
+            }
+            return udfpsProps;
+        }
+
+        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS_I006D")) {
+            int udfpsProps[] = new int[3];
+            udfpsProps[0] = displayRealSize.x/2;
+            udfpsProps[1] = 1741;
+            udfpsProps[2] = 110;
+            return udfpsProps;
+        }
+
+        return new int[0];
+    }
 
     private FingerprintSensorPropertiesInternal getHidlFingerprintSensorProps(int sensorId,
             @BiometricManager.Authenticators.Types int strength) {
         // The existence of config_udfps_sensor_props indicates that the sensor is UDFPS.
-        final int[] udfpsProps = getContext().getResources().getIntArray(
+        int[] udfpsProps = getContext().getResources().getIntArray(
                 com.android.internal.R.array.config_udfps_sensor_props);
 
         // Non-empty workaroundLocations indicates that the sensor is SFPS.
         final List<SensorLocationInternal> workaroundLocations =
                 getWorkaroundSensorProps(getContext());
 
-        final boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
+        boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
+        if(!isUdfps) udfpsProps = dynamicUdfpsProps();
+        isUdfps = !ArrayUtils.isEmpty(udfpsProps);
+
+        if(udfpsProps.length > 0) {
+            Slog.d("PHH-Enroll", "Got udfps infos " + udfpsProps[0] + ", " + udfpsProps[1] + ", " + udfpsProps[2]);
+        }
 
         // config_is_powerbutton_fps indicates whether device has a power button fingerprint sensor.
         final boolean isPowerbuttonFps = getContext().getResources().getBoolean(
@@ -843,6 +1014,69 @@ public class AuthService extends SystemService {
                 supportsSelfIllumination, resetLockoutRequiresChallenge);
     }
 
+    private static boolean samsungHasCmd(String cmd) {
+        try {
+            File f = new File("/sys/devices/virtual/sec/tsp/cmd_list");
+            if(!f.exists()) return false;
+
+            android.util.Log.d("PHH", "Managed to grab cmd list, checking...");
+            BufferedReader b = new BufferedReader(new FileReader(f));
+            String line = null;
+            while( (line = b.readLine()) != null) {
+                if(line.equals(cmd)) return true;
+            }
+            android.util.Log.d("PHH", "... nope");
+            return false;
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed reading cmd_list", e);
+            return false;
+        }
+    }
+
+    public static void samsungCmd(String cmd) {
+        try {
+            writeFile("/sys/devices/virtual/sec/tsp/cmd", cmd);
+
+            String status = readFile("/sys/devices/virtual/sec/tsp/cmd_status");
+            String ret = readFile("/sys/devices/virtual/sec/tsp/cmd_result");
+
+            android.util.Log.d("PHH", "Sending command " + cmd + " returned " + ret + ":" + status);
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed sending command " + cmd, e);
+        }
+    }
+
+    private static void writeFile(String path, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(path, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + path + ": " + value);
+        }
+    }
+
+    private static void writeFile(File file, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(file, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + file + ": " + value);
+        }
+    }
+
+    private static String readFile(String path) {
+        try {
+            File f = new File(path);
+
+            BufferedReader b = new BufferedReader(new FileReader(f));
+            return b.readLine();
+        } catch(Exception e) {
+            return null;
+        }
+    }
+
     private SensorPropertiesInternal getHidlIrisSensorProps(int sensorId,
             @BiometricManager.Authenticators.Types int strength) {
         final int maxEnrollmentsPerUser = 1;
-- 
2.34.1

